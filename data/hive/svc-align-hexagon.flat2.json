{
    "_id": "type.17",
    "_type": "type",
    "created": "2016-12-08T18:56:41-05:00",
    "modified": "2017-10-05T13:07:11-04:00",
    "name": "svc-align-hexagon",
    "title": "HIVE-Hexagon",
    "description": "HIVE hexagon alignment engine optimized for HIVE cloud performance on Next Generation data",
    "parent": {
        "1": "type.90",
        "13": "type.349"
    },
    "prefetch": 1,
    "fields": {
        "1.2": {
            "field_name": "alignmentEngine",
            "field_title": "Optimal Alignment Search",
            "field_type": "integer",
            "field_default_value": "1",
            "field_constraint": "choice",
            "field_constraint_data": "0///Only Identities|1///Smith-Waterman",
            "field_description": "Decide if you want to perform complete best optimal alignment with Smith Waterman or just quick lookup of a highly scoring potential hit"
        },
        "1.3": {
            "field_name": "alignParam",
            "field_title": "Alignment Parameters",
            "field_type": "list",
            "field_description": "group"
        },
        "1.4": {
            "field_name": "allowShorterEnds",
            "field_title": "Shorter Terminus Alignment",
            "field_type": "integer",
            "field_parent": "alignParam",
            "field_default_value": "0",
            "field_constraint": "eval",
            "field_constraint_data": "!isNaN(\"$_(val)\")",
            "field_constraint_description": "Give a Number"
        },
        "1.5": {
            "field_name": "basicAlgParam",
            "field_title": "Alignment Filters",
            "field_type": "list",
            "field_description": "group"
        },
        "1.6": {
            "field_name": "computeDiagonalWidth",
            "field_title": "Width of Intelligent Diagonal",
            "field_type": "string",
            "field_default_value": "auto",
            "field_description": "Specify the width around the Smith-Waterman matrix diagonal to increase computation speed. Windows too narrow will result in significantly faster computation but may miss actual gapped alignments. "
        },
        "1.7": {
            "field_name": "costGapNext",
            "field_title": "Gap Continuation Cost",
            "field_type": "integer",
            "field_parent": "alignParam",
            "field_default_value": "-4",
            "field_constraint": "eval",
            "field_constraint_data": "!isNaN(\"$_(val)\")",
            "field_constraint_description": "Give a Number",
            "field_description": "Gap next cost"
        },
        "1.8": {
            "field_name": "costGapOpen",
            "field_title": "Gap Opening Cost",
            "field_type": "integer",
            "field_parent": "alignParam",
            "field_default_value": "-12",
            "field_constraint": "eval",
            "field_constraint_data": "!isNaN(\"$_(val)\")",
            "field_constraint_description": "Give a Number",
            "field_description": "Gap open cost"
        },
        "1.9": {
            "field_name": "costMatch",
            "field_title": "Match Benefit",
            "field_type": "integer",
            "field_parent": "alignParam",
            "field_default_value": "5",
            "field_description": "Match cost"
        },
        "1.10": {
            "field_name": "costMismatch",
            "field_title": "Mismatch Penalty",
            "field_type": "integer",
            "field_parent": "alignParam",
            "field_default_value": "-4",
            "field_constraint": "eval",
            "field_constraint_data": "!isNaN(\"$_(val)\")",
            "field_constraint_description": "Give a Number",
            "field_description": "Mismatch cost"
        },
        "1.11": {
            "field_name": "costMismatchNext",
            "field_title": "Mismatch Continuation Penalty",
            "field_type": "integer",
            "field_parent": "alignParam",
            "field_default_value": "-6",
            "field_constraint": "eval",
            "field_constraint_data": "!isNaN(\"$_(val)\")",
            "field_constraint_description": "Give a Number",
            "field_description": "Multiple Mismatch Cost"
        },
        "1.12": {
            "field_name": "doubleHash",
            "field_title": "Use Double Length Hash Optimization",
            "field_type": "bool",
            "field_default_value": "0",
            "field_is_optional_fg": 1
        },
        "1.13": {
            "field_name": "doubleStagePerfect",
            "field_title": "Use Exact Match Preference Optimization",
            "field_type": "integer",
            "field_default_value": "1",
            "field_constraint": "choice",
            "field_constraint_data": "0///Do not use exact match optimiztion|1///Use exact match optimization|2///Use exact match optimization while considering repeats"
        },
        "1.14": {
            "field_name": "hashCompileStp",
            "field_title": "Intelligent K-mer Jump in Reference",
            "field_type": "string",
            "field_default_value": "auto",
            "field_description": "Seeding in large genomes significantly improves the alignment speed, but can decrease the sensitivity. Choose \"1\" to optimize sensitivity."
        },
        "1.15": {
            "field_name": "hashStp",
            "field_title": "Intelligent K-mer Jump in Read",
            "field_type": "string",
            "field_default_value": "auto",
            "field_description": "Seeding improves overall alignment speed at a potential tradeoff of lost sensitivity. Choose \"1\" to optimize sensitivity."
        },
        "1.16": {
            "field_name": "isbackward",
            "field_title": "Alignment Directionality",
            "field_type": "integer",
            "field_default_value": "1",
            "field_constraint": "choice",
            "field_constraint_data": "0///Forward|2///Reverse complement|1///Bi-directional",
            "field_description": "Defines wether alignments are searched in a unidirectional (forward or reverse) or bi-directional (forward and reverse) orientation"
        },
        "1.17": {
            "field_name": "isextendtails",
            "field_title": "Alignment Tail Extension",
            "field_type": "integer",
            "field_default_value": "0",
            "field_constraint": "choice",
            "field_constraint_data": "0///Conservative Compact|1///Agressive Extended",
            "field_description": "If extended mode is selected, the alignment length will be maximized as long as the extension is accompanied by a good score. In compact mode, only the highest scoring local alignment is reported."
        },
        "1.18": {
            "field_name": "isglobal",
            "field_title": "Alignment Scope",
            "field_type": "integer",
            "field_parent": "alignParam",
            "field_default_value": "0",
            "field_constraint": "choice",
            "field_constraint_data": "0///Local|1///Global",
            "field_description": "Choosing local will tend to find alignments with higher scores aligned locally. Choosing global will produce alignments where the query sequence are aligned to the subject across the whole length."
        },
        "1.19": {
            "field_name": "isoptimize",
            "field_title": "Intellegent Diagonal ",
            "field_type": "integer",
            "field_default_value": "1",
            "field_constraint": "choice",
            "field_constraint_data": "0///Complete matrix|1///Diagonal of a given size",
            "field_description": "Smith-Waterman optimizations"
        },
        "1.20": {
            "field_name": "looseExtenderMinimumLengthPercent",
            "field_title": "K-mer Extension Minimal Length Percent",
            "field_type": "integer",
            "field_default_value": "66",
            "field_constraint": "eval",
            "field_constraint_data": "!isNaN(\"$_(val)\")",
            "field_constraint_description": "Give a Number",
            "field_description": "Defines the minimum length of extension, as a percentage of seed length, required to proceed with Smith-Waterman."
        },
        "1.21": {
            "field_name": "looseExtenderMismatchesPercent",
            "field_title": "K-mer Extension Mismatch Allowance Percent",
            "field_type": "integer",
            "field_default_value": "25",
            "field_constraint": "eval",
            "field_constraint_data": "!(isNaN(\"$_(val)\"))",
            "field_constraint_description": "Give a Number",
            "field_description": "Defines the maximum mismatch, as a percentage of seed length, allowed in order to progress to Smith-Waterman."
        },
        "1.22": {
            "field_name": "maxExtensionGaps",
            "field_title": "Allowed number of gaps during extension",
            "field_type": "integer",
            "field_default_value": "0",
            "field_constraint": "eval",
            "field_constraint_data": "!isNaN(\"$_(val)\")",
            "field_constraint_description": "Give a Number",
            "field_description": "The number of cumulative insertions and deletions allowed during seed extension."
        },
        "1.23": {
            "field_name": "maxHashBin",
            "field_title": "Over-represented K-Mer suppression",
            "field_type": "integer",
            "field_default_value": "50",
            "field_constraint": "eval",
            "field_constraint_data": "!(isNaN(\"$_(val)\"))",
            "field_constraint_description": "Give a Number",
            "field_description": "Some K-mers are repeated much more frequently than would be expected by random occurrence. The aligner will only try to seed up to the specified number of any given K-mer hits."
        },
        "1.24": {
            "field_name": "referenceAnnot",
            "field_title": "Reference Annotation Filter",
            "field_type": "string",
            "field_order": 1,
            "field_is_optional_fg": 1,
            "field_is_multi_fg": 1,
            "field_constraint": "type",
            "field_constraint_data": "u-ionAnnot"
        },
        "1.25": {
            "field_name": "referenceAnnotTypes",
            "field_title": "Reference Annotation Types",
            "field_type": "string",
            "field_order": 2,
            "field_is_optional_fg": 1,
            "field_is_multi_fg": 1,
            "field_constraint": "choice+",
            "field_constraint_data": "mat_peptide///Mature Peptide|CDS///Coding Regions"
        },
        "1.26": {
            "field_name": "reverseEngine",
            "field_title": "Genome Size",
            "field_type": "integer",
            "field_default_value": "0",
            "field_is_hidden_fg": 1,
            "field_constraint": "choice",
            "field_constraint_data": "0///Small genomes|1///Large genomes",
            "field_description": "Decide if you want to perform complete best optimal alignment with Smith Watermann or just quick lookup of a highly scoring potential hit"
        },
        "1.27": {
            "field_name": "searchRepeatsAndTrans",
            "field_title": "Repeat and Transposition Discovery",
            "field_type": "integer",
            "field_parent": "basicAlgParam",
            "field_default_value": "0",
            "field_constraint": "choice",
            "field_constraint_data": "0///do not search for repeats and transpositions|1///search for repeats only|2///search for repeats and transpositions",
            "field_description": "Performs more detailed multi-pass lookups for repeats and transpositions (slower to run)"
        },
        "1.28": {
            "field_name": "seed",
            "field_title": "Seed K-mer ",
            "field_type": "integer",
            "field_parent": "alignParam",
            "field_default_value": "11",
            "field_constraint": "choice",
            "field_constraint_data": "8///8 letters|9///9 letters|10///10 letters|11///11 letters|12///12 letters|14///14 letters|-8///16 letters|-9///18 letters|-10///20 letters|-11///22 letters|-12///24 letters|-14///28 letters",
            "field_description": "Minimum length of k-mer required to be aligned to consider the area of the read query starting from this k-mer"
        },
        "1.29": {
            "field_name": "selfQueryPosJumpInNonPerfectAlignment",
            "field_title": "Self overlapping seed matches",
            "field_type": "integer",
            "field_default_value": "1",
            "field_is_optional_fg": 1,
            "field_constraint": "choice",
            "field_constraint_data": "0///Consider Overlapping Seed Matches|1///Ignore Overlaping Seed Matches"
        },
        "1.30": {
            "field_name": "trimLowScoreEnds",
            "field_title": "Trim loosly aligned ends",
            "field_type": "array",
            "field_is_optional_fg": 1
        },
        "1.31": {
            "field_name": "trimLowScoreEndsMaxMismatches",
            "field_title": "Maximum mismatch (%)",
            "field_type": "real",
            "field_parent": "trimLowScoreEnds",
            "field_is_optional_fg": 1,
            "field_constraint": "eval",
            "field_constraint_data": "$_(val) >= 0 && $_(val) < 100"
        },
        "1.32": {
            "field_name": "trimLowScoreEndsWindow",
            "field_title": "Window size",
            "field_type": "integer",
            "field_parent": "trimLowScoreEnds",
            "field_default_value": "0",
            "field_is_optional_fg": 1,
            "field_constraint": "choice+",
            "field_constraint_data": "-1///seed size window|10///10 bases window|20///20 bases window|30///30 bases window"
        },
        "1.33": {
            "field_name": "useRedundSim",
            "field_title": "Use Read Self Similarity",
            "field_type": "integer",
            "field_default_value": "1",
            "field_is_optional_fg": 1,
            "field_constraint": "choice",
            "field_constraint_data": "0///Do not use read self similarity optimization|1///Use self similarity optimization"
        },
        "1.34": {
            "field_name": "mismatches",
            "field_title": "Mismatches",
            "field_type": "array"
        },
        "1.35": {
            "field_name": "considerGoodSubalignments",
            "field_title": "Computed on",
            "field_type": "integer",
            "field_parent": "mismatches",
            "field_order": 2,
            "field_default_value": "1",
            "field_constraint": "choice",
            "field_constraint_data": "0///Alignment length|1///Minimum match length|2///Read length"
        },
        "1.36": {
            "field_name": "maxMissQueryPercent",
            "field_title": "Percent Allowed",
            "field_type": "integer",
            "field_parent": "mismatches",
            "field_order": 1,
            "field_default_value": "15",
            "field_is_batch_fg": 1,
            "field_constraint": "eval",
            "field_constraint_data": "!(isNaN(\"$_(val)\")) && parseInt(\"$_(val)\")>=0",
            "field_constraint_description": "Give a positive number",
            "field_description": "Alignments with a greater percentage mismatch than this threashold are discarded"
        },
        "1.41": {
            "field_name": "acceptNNNQuaTrheshold",
            "field_title": "Filter NN and low quality",
            "field_type": "integer",
            "field_parent": "complexityRef",
            "field_order": 3,
            "field_default_value": "0",
            "field_constraint": "choice+",
            "field_constraint_data": "0///do not filter|1///filter Ns only|20///do not seed on  low quality positions",
            "field_description": "The quality filter"
        },
        "1.42": {
            "field_name": "complexity",
            "field_title": "Low complexity filter",
            "field_type": "list",
            "field_description": "Low complexity region masking parameters"
        },
        "1.43": {
            "field_name": "complexityEntropy",
            "field_title": "Minimal Shannons Entropy",
            "field_type": "real",
            "field_parent": "complexityQry",
            "field_order": 0,
            "field_default_value": "0",
            "field_constraint": "choice+",
            "field_constraint_data": "0///0 - permissive|1.///1 - lenient|1.2///1.2 - reluctant|1.6///1.6 - strict",
            "field_description": "Minimal Shannons entrop value allowed within complexity window"
        },
        "1.44": {
            "field_name": "complexityQry",
            "field_title": "Short read filtration",
            "field_type": "array",
            "field_parent": "complexity"
        },
        "1.45": {
            "field_name": "complexityRef",
            "field_title": "Reference masking",
            "field_type": "array",
            "field_parent": "complexity"
        },
        "1.46": {
            "field_name": "complexityRefEntropy",
            "field_title": "Minimal Shannons Entropy",
            "field_type": "real",
            "field_parent": "complexityRef",
            "field_order": 0,
            "field_default_value": "0",
            "field_constraint": "choice+",
            "field_constraint_data": "0///0 - permissive|1.///1 - lenient|1.2///1.2 - reluctant|1.6///1.6 - strict",
            "field_description": "Minimal Shannons entrop value allowed within complexity window"
        },
        "1.47": {
            "field_name": "complexityRefWindow",
            "field_title": "Window Size",
            "field_type": "integer",
            "field_parent": "complexityRef",
            "field_order": 0,
            "field_default_value": "0",
            "field_constraint": "choice",
            "field_constraint_data": "0///do not mask low complexity regions|20|30|40|60",
            "field_description": "Low complexity region masking window size. All query sequences whch have low entropic content within the window of this size will be masked in alignment procedure"
        },
        "1.48": {
            "field_name": "complexityWindow",
            "field_title": "Window Size",
            "field_type": "integer",
            "field_parent": "complexityQry",
            "field_order": 0,
            "field_default_value": "0",
            "field_constraint": "choice",
            "field_constraint_data": "0///do not filter low complexity reads|15|20|30",
            "field_description": "Low complexity region masking window size. All query sequences whch have low entropic content within the window of this size will be masked in alignment procedure"
        },
        "1.49": {
            "field_name": "maximumPercentLowQualityAllowed",
            "field_title": "Maximum Percent Low Quality Allowed",
            "field_type": "integer",
            "field_parent": "complexityQry",
            "field_order": 4,
            "field_default_value": "0",
            "field_is_readonly_fg": -1,
            "field_constraint": "choice+",
            "field_constraint_data": "0///do not filter"
        },
        "1.50": {
            "field_name": "maxHitsPerRead",
            "field_title": "Maximum Number of Hits per Read to Consider",
            "field_type": "integer",
            "field_default_value": "200",
            "field_is_readonly_fg": -1,
            "field_constraint": "eval",
            "field_constraint_data": "!(isNaN(\"$_(val)\")) && parseInt(\"$_(val)\")>=0",
            "field_constraint_description": "Give a positive number"
        },
        "1.52": {
            "field_name": "maxSeedSearchQueryPos",
            "field_title": "Restrict query seed search",
            "field_type": "integer",
            "field_is_readonly_fg": -1,
            "field_is_optional_fg": 1,
            "field_constraint": "eval",
            "field_constraint_data": "!(isNaN(\"$_(val)\")) && parseInt(\"$_(val)\")>=0"
        }
    }
}